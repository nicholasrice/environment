set encoding=utf-8

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

set nocompatible              " be iMproved, required
filetype off                  " required
set t_Co=256                  " Use 256 colors
set noswapfile                " don't create swap files

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'Valloric/YouCompleteMe'
Plugin 'leafgarland/typescript-vim'
Plugin 'jiangmiao/auto-pairs'
Plugin 'w0rp/ale'
Plugin 'blueyed/vim-diminactive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-rsi'
Plugin 'maxmellon/vim-jsx-pretty'
Plugin 'rust-lang/rust.vim'
call vundle#end()
filetype plugin indent on

call plug#begin('~/.vim/plugged')
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-gitgutter'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'junegunn/seoul256.vim'
call plug#end()

" ensure fs.watch correctly detects file changes
set backupcopy=yes

" turn on colors and set color-scheme
syntax on
colo seoul256-light
set background=light

" turn on current-line highlighting
set cursorline

" Turn on spell checking
set spell
set spelllang=en_us

set number " show line numbers
" set relativenumber " show relative line numbers

" Set code folding
set foldmethod=indent
set foldlevelstart=3

filetype plugin indent on
" Show existing tab with 4 spaces
set tabstop=4

" When indenting with '>', use 4 spaces width
set shiftwidth=4

" When pressing tab, indent 4 spaces
set expandtab

" Prevent line-break at the end of a file
set nofixendofline
set noeol

let g:typescript_compiler_binary = 'tsc'
let g:typescript_compiler_options = ''
if !exists("g:ycm_semantic_triggers")
    let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers['typescript'] = ['.']

" Enable top buffer bar
let g:airline#extensions#tabline#enabled = 1

" Only show file name in buffer bar
let g:airline#extensions#tabline#fnamemod = ':t'

"Enable ALE with airline
let g:airline#extensions#ale#enabled = 1

" Airline themes
let g:airline_theme='zenburn'

autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow

" Highlighting
highlight clear SpellBad
highlight SpellBad cterm=underline

" Use ag to search for files
let $FZF_DEFAULT_COMMAND= 'ag --ignore dist --ignore node_modules -g ""'

" press 'jj' to exit insert mode
imap jj <Esc>

" press ctrp+- to search files
map <c-p> :Files<enter>

" Configure ALE
map <c-]> :ALEGoToDefinition<enter>
let g:ale_fixers = { 'typescript': ['prettier','tslint'] }

" Use json syntax for certain file types
autocmd BufNewFile,BufRead .babelrc set syntax=json

" Use :bd to delete buffers while maintaining window splits
command Bd bp|bd #